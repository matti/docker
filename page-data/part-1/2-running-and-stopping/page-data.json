{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-1/2-running-and-stopping","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"exercise","properties":{"name":"docker run ubuntu"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next we will start using a more useful image than hello-world. We can run ubuntu just with the shorthand "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run ubuntu"}]},{"type":"text","value":" (which is exactly the same as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container run ubuntu"}]},{"type":"text","value":")"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run ubuntu\n  Unable to find image 'ubuntu:latest' locally\n  latest: Pulling from library/ubuntu\n  0509fae36eb0: Pull complete\n  Digest: sha256:4b1d0c4a2d2aaf63b37111f34eb9fa89fa1bf53dd6e4ca954d47caebca4005c2\n  Status: Downloaded newer image for ubuntu:latest"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" will create a "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Tty_(Unix)","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"tty"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -t ubuntu\n  root@f83969ce2cd1:/#"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we're inside the container and if we input "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" and press enter... nothing happens. Because our terminal is not sending the messages into the container. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" flag will instruct to pass the "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"STDIN"}]},{"type":"text","value":" to the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you'll realize that you're stuck. Control+C or typing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":" won't work."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just open up another terminal to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"stop"}]},{"type":"text","value":" the container.  Note that the container's hostname is set to the container name so you don't necessarily have to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container ls"}]},{"type":"text","value":" here, just copy the ID from the output after "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"root@<CONTAINER ID>"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now if you just "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker stop f83969ce2cd1"}]},{"type":"text","value":" you are stuck again, atleast for 10 seconds. Why exactly 10?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's see the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--help"}]},{"type":"text","value":" for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker stop"}]},{"type":"text","value":" (which is exactly the same as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container stop"}]},{"type":"text","value":")"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker stop --help\n\nUsage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\nStop one or more running containers\n\nOptions:\n  -t, --time int   Seconds to wait for stop before killing it (default 10)"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Stop sends a "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Signal_(IPC)","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"SIGTERM"}]},{"type":"text","value":" Signal to the process running in the container and waits for 10 seconds to exist. Our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" image does not listen this signal and then stop will time out and send unconditional "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SIGKILL"}]},{"type":"text","value":" instead. You'll notice someday that many images don't handle "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SIGTERM"}]},{"type":"text","value":" properly."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, as it's cumbersome to fix "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" image right now, specifying "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t 0"}]},{"type":"text","value":" would stop the image immediately."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even better, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker rm -f <id>"}]},{"type":"text","value":" would not only stop, but remove the container all together which is probably what you often want."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So now let's start the container again with both "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! Now we know at least 3 useful flags. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" (interactive), "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" (tty), "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" (detached) and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-f"}]},{"type":"text","value":" (force (or format))"}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Date print loop"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"(mac/linux only) This shell script prints the output of command "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"date"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ while true; do date; sleep 1; done\nWed Nov  9 14:04:43 UTC 2022\nWed Nov  9 14:04:44 UTC 2022\nWed Nov  9 14:04:45 UTC 2022\n..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Smash "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"control+c"}]},{"type":"text","value":" a few times to stop the loop."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker run date loop"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now let's start that as the command for a new container named "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"looper"}]},{"type":"text","value":" out of our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" image"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it --name looper ubuntu bash -c 'while true; do date; sleep 1; done'\nWed Nov  9 14:04:43 UTC 2022\nWed Nov  9 14:04:44 UTC 2022\n..."}]}]}]},{"type":"element","tagName":"text-box","properties":{"name":"Quotes","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are command prompt (Windows) user you must use double quotes around the script i.e. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -it --name looper ubuntu bash -c \"while true; do date; sleep 1; done\""}]},{"type":"text","value":". The quote or double-quote may haunt you later during the course."}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So here we gave the name "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"looper"}]},{"type":"text","value":" so that the name is not autogenerated. And then we started "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"/bin/sh"}]},{"type":"text","value":" with our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-c"}]},{"type":"text","value":"ommand. When you hit "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"control+c"}]},{"type":"text","value":" it will exit the process and thus terminate the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, run the command again and it fails:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it --name looper ubuntu bash -c 'while true; do date; sleep 1; done'\n  docker: Error response from daemon: Conflict. The container name \"/looper\" is already in use by container \"3fd613501081b20101bc6df2b5711939b2dcbce7e871b3fdaaf45cbb107b92f6\". You have to remove (or rename) that container to be able to reuse that name.\n  See 'docker run --help'."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we are not autogenerating names, the previous container still exists. So let's remove it"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker rm looper\nlooper"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And then start the container as "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"daemonized"}]},{"type":"text","value":" on the background with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -d -it --name looper ubuntu bash -c 'while true; do date; sleep 1; done'\n  de13ddceec7a7d8f14348ebee739269633e5962b4005c8c4230c2ee68f2884d0"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And we notice how a bit confusingly it printed out the container id and returned."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first part, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -d"}]},{"type":"text","value":". Should be familiar by now, run container detached."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Followed by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" is short for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":". Also familiar, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" allows you to interact with the container by using the command line."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because we ran the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--name looper"}]},{"type":"text","value":", we can now reference it easily."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The image is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" and what follows it is the command given to the container."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And to check that it's running, run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container ls"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's follow "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-f"}]},{"type":"text","value":" the output of logs with"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker logs -f looper\n  Thu Feb  4 15:51:29 UTC 2021\n  Thu Feb  4 15:51:30 UTC 2021\n  Thu Feb  4 15:51:31 UTC 2021\n  ..."}]}]}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker pause / unpause"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's test pausing the looper without exiting or stopping it. In another terminal run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker pause looper"}]},{"type":"text","value":". Notice how the logs output has paused in the first terminal. To unpause run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker unpause looper"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker attach"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Keep the logs open and attach to the running container from the second terminal using 'attach':"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper\n  Mon Jan 15 19:26:54 UTC 2018\n  Mon Jan 15 19:26:55 UTC 2018\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":" option. Let's start the stopped container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start looper"}]},{"type":"text","value":" and attach to it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then try control+c."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker start looper\n\n$ docker attach --no-stdin looper\n  Mon Jan 15 19:27:54 UTC 2018\n  Mon Jan 15 19:27:55 UTC 2018\n  ^C"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The container will continue running. Control+c now only disconnects you from the STDOUT."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker exec"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To enter a container, we can start a new process in it."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ps aux"}]},{"type":"text","value":" listing we can see that our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" process got PID (process ID) of 64."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we're inside the container it behaves as you'd expect from ubuntu, and we can exit the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":" and then either kill or stop the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"docker kill looper\ndocker rm looper"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running the previous two commands is basically equivalent to running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker rm --force looper"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's start another process with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" and add "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" in order to remove it automatically after it has exited. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" ensures that there are no garbage containers left behind. It also means that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start"}]},{"type":"text","value":" can not be used to start the container after it has exited."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"docker run -d --rm -it --name looper ubuntu bash -c 'while true; do date; sleep 1; done'"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT (from "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/engine/reference/commandline/attach/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://docs.docker.com/engine/reference/commandline/attach/"}]},{"type":"text","value":")"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run"}]},{"type":"text","value":" command."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.3: Secret message"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've warmed up it's time to get inside a container while it's running!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Image "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:ubuntu"}]},{"type":"text","value":" will start a container that outputs logs into a file.\nGo inside the container and use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tail -f ./text.log"}]},{"type":"text","value":" to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the secret message and command(s) given as your answer."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.4: Missing dependencies"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Start a ubuntu image with the process "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bash -c 'echo \"Input website:\"; read website; echo \"Searching..\"; sleep 1; curl http://$website;'"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the read actually waits for input."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Test inputting "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"helsinki.fi"}]},{"type":"text","value":" into the application. It should respond with something like"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"html"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"301 Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"The document has moved "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","attr-name"]},"children":[{"type":"text","value":"href"}]},{"type":"element","tagName":"span","properties":{"className":["token","attr-value"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation","attr-equals"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]},{"type":"text","value":"http://www.helsinki.fi/"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"here"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"."},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This time return the command you used to start process and the command(s) you used to fix the ensuing problems."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?"}]},{"type":"text","value":"\n"}]}]}]},"html":"<div><exercise name='docker run ubuntu'><p>Next we will start using a more useful image than hello-world. We can run ubuntu just with the shorthand <code class=\"language-text\">docker run ubuntu</code> (which is exactly the same as <code class=\"language-text\">docker container run ubuntu</code>)</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run ubuntu\n  Unable to find image &#39;ubuntu:latest&#39; locally\n  latest: Pulling from library/ubuntu\n  0509fae36eb0: Pull complete\n  Digest: sha256:4b1d0c4a2d2aaf63b37111f34eb9fa89fa1bf53dd6e4ca954d47caebca4005c2\n  Status: Downloaded newer image for ubuntu:latest</code></pre></div><p>Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. <code class=\"language-text\">-t</code> will create a <a href=\"https://en.wikipedia.org/wiki/Tty_(Unix)\" target=\"_blank\" rel=\"noopener noreferrer\">tty</a>.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -t ubuntu\n  root@f83969ce2cd1:/#</code></pre></div><p>Now we're inside the container and if we input <code class=\"language-text\">ls</code> and press enter... nothing happens. Because our terminal is not sending the messages into the container. The <code class=\"language-text\">-i</code> flag will instruct to pass the <a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)\" target=\"_blank\" rel=\"noopener noreferrer\">STDIN</a> to the container.</p><p>Now you'll realize that you're stuck. Control+C or typing <code class=\"language-text\">exit</code> won't work.</p><p>Just open up another terminal to <code class=\"language-text\">stop</code> the container.  Note that the container's hostname is set to the container name so you don't necessarily have to <code class=\"language-text\">docker container ls</code> here, just copy the ID from the output after <code class=\"language-text\">root@&lt;CONTAINER ID&gt;</code>.</p><p>Now if you just <code class=\"language-text\">docker stop f83969ce2cd1</code> you are stuck again, atleast for 10 seconds. Why exactly 10?</p><p>Let's see the <code class=\"language-text\">--help</code> for <code class=\"language-text\">docker stop</code> (which is exactly the same as <code class=\"language-text\">docker container stop</code>)</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker stop --help\n\nUsage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\nStop one or more running containers\n\nOptions:\n  -t, --time int   Seconds to wait for stop before killing it (default 10)</code></pre></div><p>Stop sends a <a href=\"https://en.wikipedia.org/wiki/Signal_(IPC)\" target=\"_blank\" rel=\"noopener noreferrer\">SIGTERM</a> Signal to the process running in the container and waits for 10 seconds to exist. Our <code class=\"language-text\">ubuntu</code> image does not listen this signal and then stop will time out and send unconditional <code class=\"language-text\">SIGKILL</code> instead. You'll notice someday that many images don't handle <code class=\"language-text\">SIGTERM</code> properly.</p><p>So, as it's cumbersome to fix <code class=\"language-text\">ubuntu</code> image right now, specifying <code class=\"language-text\">-t 0</code> would stop the image immediately.</p><p>Even better, <code class=\"language-text\">docker rm -f &lt;id&gt;</code> would not only stop, but remove the container all together which is probably what you often want.</p><p>So now let's start the container again with both <code class=\"language-text\">-t</code> and <code class=\"language-text\">-i</code>:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</code></pre></div><p>Great! Now we know at least 3 useful flags. <code class=\"language-text\">-i</code> (interactive), <code class=\"language-text\">-t</code> (tty), <code class=\"language-text\">-d</code> (detached) and <code class=\"language-text\">-f</code> (force (or format))</p></exercise><text-box variant='learningObjectives' name='Date print loop'><p>(mac/linux only) This shell script prints the output of command <code class=\"language-text\">date</code></p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ while true; do date; sleep 1; done\nWed Nov  9 14:04:43 UTC 2022\nWed Nov  9 14:04:44 UTC 2022\nWed Nov  9 14:04:45 UTC 2022\n...</code></pre></div><p>Smash <code class=\"language-text\">control+c</code> a few times to stop the loop.</p></text-box><exercise name='docker run date loop'><p>Now let's start that as the command for a new container named <code class=\"language-text\">looper</code> out of our <code class=\"language-text\">ubuntu</code> image</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it --name looper ubuntu bash -c &#39;while true; do date; sleep 1; done&#39;\nWed Nov  9 14:04:43 UTC 2022\nWed Nov  9 14:04:44 UTC 2022\n...</code></pre></div><text-box name=\"Quotes\" variant=\"hint\"><p>If you are command prompt (Windows) user you must use double quotes around the script i.e. <code class=\"language-text\">docker run -it --name looper ubuntu bash -c &quot;while true; do date; sleep 1; done&quot;</code>. The quote or double-quote may haunt you later during the course.</p></text-box><p>So here we gave the name <code class=\"language-text\">looper</code> so that the name is not autogenerated. And then we started <code class=\"language-text\">/bin/sh</code> with our <code class=\"language-text\">-c</code>ommand. When you hit <code class=\"language-text\">control+c</code> it will exit the process and thus terminate the container.</p><p>Now, run the command again and it fails:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it --name looper ubuntu bash -c &#39;while true; do date; sleep 1; done&#39;\n  docker: Error response from daemon: Conflict. The container name &quot;/looper&quot; is already in use by container &quot;3fd613501081b20101bc6df2b5711939b2dcbce7e871b3fdaaf45cbb107b92f6&quot;. You have to remove (or rename) that container to be able to reuse that name.\n  See &#39;docker run --help&#39;.</code></pre></div><p>Since we are not autogenerating names, the previous container still exists. So let's remove it</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker rm looper\nlooper</code></pre></div><p>And then start the container as <em>daemonized</em> on the background with <code class=\"language-text\">-d</code></p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -d -it --name looper ubuntu bash -c &#39;while true; do date; sleep 1; done&#39;\n  de13ddceec7a7d8f14348ebee739269633e5962b4005c8c4230c2ee68f2884d0</code></pre></div><p>And we notice how a bit confusingly it printed out the container id and returned.</p><ul>\n<li>\n<p>The first part, <code class=\"language-text\">docker run -d</code>. Should be familiar by now, run container detached.</p>\n</li>\n<li>\n<p>Followed by <code class=\"language-text\">-it</code> is short for <code class=\"language-text\">-i</code> and <code class=\"language-text\">-t</code>. Also familiar, <code class=\"language-text\">-it</code> allows you to interact with the container by using the command line.</p>\n</li>\n<li>\n<p>Because we ran the container with <code class=\"language-text\">--name looper</code>, we can now reference it easily.</p>\n</li>\n<li>\n<p>The image is <code class=\"language-text\">ubuntu</code> and what follows it is the command given to the container.</p>\n</li>\n</ul><p>And to check that it's running, run <code class=\"language-text\">docker container ls</code></p><p>Let's follow <code class=\"language-text\">-f</code> the output of logs with</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker logs -f looper\n  Thu Feb  4 15:51:29 UTC 2021\n  Thu Feb  4 15:51:30 UTC 2021\n  Thu Feb  4 15:51:31 UTC 2021\n  ...</code></pre></div></exercise><exercise name='docker pause / unpause'><p>Let's test pausing the looper without exiting or stopping it. In another terminal run <code class=\"language-text\">docker pause looper</code>. Notice how the logs output has paused in the first terminal. To unpause run <code class=\"language-text\">docker unpause looper</code>.</p></exercise><exercise name='docker attach'><p>Keep the logs open and attach to the running container from the second terminal using 'attach':</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper\n  Mon Jan 15 19:26:54 UTC 2018\n  Mon Jan 15 19:26:55 UTC 2018\n  ...</code></pre></div><p>Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running.</p><p>If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with <code class=\"language-text\">--no-stdin</code> option. Let's start the stopped container with <code class=\"language-text\">docker start looper</code> and attach to it with <code class=\"language-text\">--no-stdin</code>.</p><p>Then try control+c.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker start looper\n\n$ docker attach --no-stdin looper\n  Mon Jan 15 19:27:54 UTC 2018\n  Mon Jan 15 19:27:55 UTC 2018\n  ^C</code></pre></div><p>The container will continue running. Control+c now only disconnects you from the STDOUT.</p></exercise><exercise name='docker exec'><p>To enter a container, we can start a new process in it.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux</code></pre></div><p>From the <code class=\"language-text\">ps aux</code> listing we can see that our <code class=\"language-text\">bash</code> process got PID (process ID) of 64.</p><p>Now that we're inside the container it behaves as you'd expect from ubuntu, and we can exit the container with <code class=\"language-text\">exit</code> and then either kill or stop the container.</p><p>Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">docker kill looper\ndocker rm looper</code></pre></div><p>Running the previous two commands is basically equivalent to running <code class=\"language-text\">docker rm --force looper</code></p><p>Let's start another process with <code class=\"language-text\">-it</code> and add <code class=\"language-text\">--rm</code> in order to remove it automatically after it has exited. The <code class=\"language-text\">--rm</code> ensures that there are no garbage containers left behind. It also means that <code class=\"language-text\">docker start</code> can not be used to start the container after it has exited.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">docker run -d --rm -it --name looper ubuntu bash -c &#39;while true; do date; sleep 1; done&#39;</code></pre></div><p>Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT (from <a href=\"https://docs.docker.com/engine/reference/commandline/attach/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/commandline/attach/</a>)</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence</code></pre></div><p>Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified <code class=\"language-text\">--rm</code> in <code class=\"language-text\">docker run</code> command.</p></exercise><exercise name=\"Exercise 1.3: Secret message\"><p>Now that we've warmed up it's time to get inside a container while it's running!</p><p>Image <code class=\"language-text\">devopsdockeruh/simple-web-service:ubuntu</code> will start a container that outputs logs into a file.\nGo inside the container and use <code class=\"language-text\">tail -f ./text.log</code> to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\".</p><p>Submit the secret message and command(s) given as your answer.</p></exercise><exercise name=\"Exercise 1.4: Missing dependencies\"><p>Start a ubuntu image with the process <code class=\"language-text\">bash -c &#39;echo &quot;Input website:&quot;; read website; echo &quot;Searching..&quot;; sleep 1; curl http://$website;&#39;</code></p><p>You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the read actually waits for input.</p><blockquote>\n<p>Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container.</p>\n</blockquote><p>Test inputting <code class=\"language-text\">helsinki.fi</code> into the application. It should respond with something like</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>301 Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>The document has moved <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.helsinki.fi/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div><p>This time return the command you used to start process and the command(s) you used to fix the ensuing problems.</p><ul>\n<li>This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?</li>\n</ul></exercise></div>","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"},"fileAbsolutePath":"/Users/mpa/dev/docker-hy/data/part-1/section-2.md"},"allPages":{"edges":[{"node":{"id":"948f83e9-b338-5b95-ae2d-a7c680eadb0c","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"67016067-426f-51cc-8ea0-3e16da657b13","frontmatter":{"path":"/part-3/3-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"bc9490fd-c9f8-5a6a-8370-2ef946d4e3fa","frontmatter":{"path":"/part-3/4-extras","title":"Extras"}}},{"node":{"id":"fe138126-ea55-51b2-a071-8a7532aa51af","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"8147ba2c-1cbf-5878-b301-ef847e624e70","frontmatter":{"path":"/part-3/2-development","title":"Development with Docker"}}},{"node":{"id":"ed0e0aae-16de-5de9-8877-77337c24124f","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"1b7ed2f7-c954-577b-ac8d-cae5f2dfc838","frontmatter":{"path":"/part-2/2-docker-networking","title":"More Docker networking"}}},{"node":{"id":"3a0a776d-ec13-50e5-ade2-6c0d549f58ba","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"ad6b1fb2-b897-54c5-8ce5-00acf0c99caf","frontmatter":{"path":"/part-2/3-wordpress","title":"Wordpress"}}},{"node":{"id":"cea7278b-6d74-539e-b105-29dc780024b6","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"83f82958-678d-500e-8ce0-a2d587fed9c1","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"087c95a9-00b7-523d-bc13-85d227b71193","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"d3b909df-cb77-59a6-8402-f961bd2a7aff","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"e8a51e48-cc89-5f08-8c00-2c3abe47d5a9","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"455aef79-d091-56bd-bace-e566c89238bb","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"2b806816-8c59-5a3a-9b89-da8548d44e0a","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"a3fe4972-edce-5bc7-9eb5-b355fac1ebf8","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"3447594d-f3e4-56a2-8d83-12bf7ff5f3a4","frontmatter":{"path":"/part-3/1-using-non-root-user","title":"Using a non-root user"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}