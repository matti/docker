{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-1/3-in-depth-dive-to-images","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images are the basic building blocks for containers and other images. When you \"containerize\" an application you work towards creating the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By learning what images are and how to create them you are ready to start utilizing containers in your own projects."}]},{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Where do the images come from?"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When running a command such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run hello-world"}]},{"type":"text","value":", Docker will automatically search "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub"}]},{"type":"text","value":" for the image if it is not found locally."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This means that we can pull and run any public image from Docker's servers. For example‚ if we wanted to start an instance of the PostgreSQL database, we could just run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run postgres"}]},{"type":"text","value":", which would pull and run "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/_/postgres/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://hub.docker.com/_/postgres/"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can search for images in the Docker Hub with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search"}]},{"type":"text","value":". Try running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search hello-world"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The search finds plenty of results, and prints each image's name, short description, amount of stars, and \"official\" and \"automated\" statuses."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker search hello-world\n\n  NAME                          DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\n  hello-world                   Hello World! (an example of minimal Dockeriz…   1898      [OK]\n  kitematic/hello-world-nginx   A light-weight nginx container that demonstr…   153\n  tutum/hello-world             Image to test docker deployments. Has Apache…   90                   [OK]\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's examine the list."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hello-world"}]},{"type":"text","value":", is an official image. "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/docker-hub/official_images/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Official images"}]},{"type":"text","value":" are curated and reviewed by Docker, Inc. and are usually actively maintained by the authors. They are built from repositories at "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/docker-library/official-images/tree/master/library","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/docker-library/official-images/tree/master/library"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When browsing the CLI's search results, you can recognize an official image from the \"[OK]\" in the \"OFFICIAL\" column and also from the fact that the image's name has no prefix (aka organization/user). When browsing Docker Hub, the page will show \"Docker Official Images\" as the repository, instead of a user or organization. For example, see the "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/_/hello-world/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hello-world"}]},{"type":"text","value":" image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The seventh result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tutum/hello-world"}]},{"type":"text","value":", is marked as \"automated\". This means that the image is "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/docker-hub/builds/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"automatically built"}]},{"type":"text","value":" from the source repository. Its "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/tutum/hello-world/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" shows its previous \"Builds\" and a link to the image's \"Source Repository\" (in this case, to GitHub) from which Docker Hub builds the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ninth result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"kitematic/hello-world-nginx"}]},{"type":"text","value":", is neither an official nor an automated image.\nWe can't know what the image is built from, since its "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/kitematic/hello-world-nginx/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" has no links to any repositories. The only thing its Docker Hub page reveals is that the image is 8 years old. Even if the image's \"Overview\" section had links to a repository, we would have no guarantees that the published image was built from that source."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are also other Docker registries competing with Docker Hub, such as "},{"type":"element","tagName":"a","properties":{"href":"https://quay.io/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"quay"}]},{"type":"text","value":". However, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search"}]},{"type":"text","value":" will only search from Docker Hub, so we will need to use the registry's web pages to search for images. Let's have look at one the images "},{"type":"element","tagName":"a","properties":{"href":"https://quay.io/repository/jetstack/cert-manager-controller","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://quay.io/repository/jetstack/cert-manager-controller"}]},{"type":"text","value":" - The page says \"Pull this container with the following Docker command:\""}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"docker pull quay.io/jetstack/cert-manager-controller"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running that command however, fails:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull quay.io/jetstack/cert-manager-controller\nUsing default tag: latest\nError response from daemon: manifest for quay.io/jetstack/cert-manager-controller:latest not found: manifest unknown: manifest unknown"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":":latest"}]},{"type":"text","value":" tag is not found and the quay.io interface doesn't know about it."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To know what to pull, we need to check the tag listing on the left "},{"type":"element","tagName":"a","properties":{"href":"https://quay.io/repository/jetstack/cert-manager-controller?tab=tags","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://quay.io/repository/jetstack/cert-manager-controller?tab=tags"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now when we add some tag, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"v1.10.0"}]},{"type":"text","value":" to the pull command it will work:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull quay.io/jetstack/cert-manager-controller:v1.10.0\nv1.10.0: Pulling from jetstack/cert-manager-controller\nf7cbc5ea5f86: Pull complete\n72fd16212d50: Pull complete\n986dd91bfabe: Pull complete\n88ba5ff7e12b: Pull complete\nDigest: sha256:bdacfee1ec9bc2b93d46eeb9cac3abc842813b60ba522848c551cb846384c367\nStatus: Downloaded newer image for quay.io/jetstack/cert-manager-controller:v1.10.0\nquay.io/jetstack/cert-manager-controller:v1.10.0"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, if you don't specify the host part, docker pull will default to Docker Hub."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You don't have to use public Docker registries at all. For example the official Docker registry is open source "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/registry/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://docs.docker.com/registry/"}]},{"type":"text","value":", but there are plenty of other compatible solutions to choose from such as "},{"type":"element","tagName":"a","properties":{"href":"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"}]},{"type":"text","value":", "},{"type":"element","tagName":"a","properties":{"href":"https://aws.amazon.com/ecr/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://aws.amazon.com/ecr/"}]},{"type":"text","value":", "},{"type":"element","tagName":"a","properties":{"href":"https://cloud.google.com/container-registry","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://cloud.google.com/container-registry"}]},{"type":"text","value":", "},{"type":"element","tagName":"a","properties":{"href":"https://goharbor.io/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://goharbor.io/"}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"https://www.projectquay.io/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://www.projectquay.io/"}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Look into the ubuntu image"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's look into the ubuntu image on "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/library/ubuntu/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Was: "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/tianon/docker-brew-ubuntu-core/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/tianon/docker-brew-ubuntu-core/"}]},{"type":"text","value":", current state of things: "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/docker-library/repo-info/issues/66","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/docker-library/repo-info/issues/66"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we can not trust this process, we need to create our own Ubuntu image, for example by forking "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/tianon/docker-brew-ubuntu-core/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/tianon/docker-brew-ubuntu-core/"}]}]}]},{"type":"element","tagName":"exercise","properties":{"name":"A detailed look into an image"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's go back to a more relevant image than 'hello-world', the ubuntu image, one of the most common Docker images to use as a base for your own image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's pull Ubuntu and look at the first lines:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull ubuntu\n  Using default tag: latest\n  latest: Pulling from library/ubuntu"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we didn't specify a tag, Docker defaulted to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":", which is usually the latest image built and pushed to the registry. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"However"}]},{"type":"text","value":", in this case, the "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/_/ubuntu","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"repository's README"}]},{"type":"text","value":" says that the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:latest"}]},{"type":"text","value":" tag points to the \"latest LTS\" instead since that's the version recommended for general use."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images can be tagged to save different versions of the same image. You define an image's tag by adding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":":<tag>"}]},{"type":"text","value":" after the image's name."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ubuntu's "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/library/ubuntu/tags/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" reveals that there's a tag named 18.04 which promises us that the image is based on Ubuntu 18.04. Let's pull that as well:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull ubuntu:18.04\n  18.04: Pulling from library/ubuntu\n  c2ca09a1934b: Downloading [============================================>      ]  34.25MB/38.64MB\n  d6c3619d2153: Download complete\n  0efe07335a04: Download complete\n  6b1bb01b3a3b: Download complete\n  43a98c187399: Download complete"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images are composed of different layers that are downloaded in parallel to speed up the download. Images being made of layers also have other aspects and we will talk about them in part 3."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can also tag images locally for convenience, for example, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker tag ubuntu:18.04 ubuntu:bionic"}]},{"type":"text","value":" creates the tag "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:bionic"}]},{"type":"text","value":" which refers to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:18.04"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tagging is also a way to \"rename\" images. Run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker tag ubuntu:18.04 fav_distro:bionic"}]},{"type":"text","value":" and check "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker images"}]},{"type":"text","value":" to see what effects the command had."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To summarize, an image name may consist of 3 parts plus a tag. Usually like the following: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"registry/organisation/image:tag"}]},{"type":"text","value":". But may be as short as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":", then the registry will default to docker hub, organisation to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"library"}]},{"type":"text","value":" and tag to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":". The organisation may also be a user, but calling it an organisation may be more clear."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.5: Sizes of images"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In a previous exercise we used "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:ubuntu"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the same application but instead of ubuntu is using "},{"type":"element","tagName":"a","properties":{"href":"https://www.alpinelinux.org","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Alpine Linux"}]},{"type":"text","value":": "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:alpine"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Pull both images and compare the image sizes with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker image ls"}]},{"type":"text","value":".\nGo inside the alpine container and make sure the secret message functionality is the same. Alpine version doesn't have "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" but it has "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sh"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker/hello"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, we get to build our own images and get to talk about Dockerfile and why it's so great."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerfile is simply a file that contains the build instructions for an image. You define what should be included in the image with different instructions. We'll learn about the best practices here by creating one."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's take a most simple application and containerize it first. Here is a script called \"hello.sh\""}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"hello/hello.sh"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"sh"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-sh"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-sh"]},"children":[{"type":"text","value":"#!/bin/sh\n\necho \"Hello, docker!\""}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, we will test that it even works. Create the file, add execution permissions and run it:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ chmod +x hello.sh\n\n$ ./hello.sh\n  Hello, docker!"}]}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you're using windows you can skip these two and add chmod +x hello.sh to the Dockerfile."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And now to create an image from it. We'll have to create the Dockerfile that declares all of the required dependencies. At least it depends on something that can run shell scripts. So I will choose Alpine, it is a small Linux distribution and often used to create small images."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even though we're using alpine here, you can use Ubuntu during exercises. Ubuntu images by default contain more tools to debug what is wrong when something doesn't work. In part 3 we will talk more about why small images are important."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will choose exactly which version of a given image we want to use. This makes it so that we don't accidentally update through a breaking change, and we know which images need updating when there are known security vulnerabilities in old images."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now create a file and name it \"Dockerfile\" and lets put the following instructions inside it:"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Start from the alpine image that is smaller but no fancy tools"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" alpine"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"3.13\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Use /usr/src/app as our workdir. The following instructions will be executed in this location."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /usr/src/app\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" hello.sh .\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Alternatively, if we skipped chmod earlier, we can add execution permissions during the build."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" chmod +x hello.sh\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# When running docker run the command will be ./hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" ./hello.sh"}]}]}]},{"type":"element","tagName":"text-box","properties":{"name":"Permission denied","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're now getting \"/bin/sh: ./hello.sh: Permission denied\" it's because the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"chmod +x hello.sh"}]},{"type":"text","value":" was skipped earlier. You can simply uncomment the RUN instruction between COPY and CMD instructions"}]}]},{"type":"element","tagName":"text-box","properties":{"name":"not found","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're now getting \"/bin/sh: ./hello.sh: not found\" and you're using Windows it might be because by default Windows uses "},{"type":"element","tagName":"a","properties":{"href":"https://www.cs.toronto.edu/~krueger/csc209h/tut/line-endings.html","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"CRLF"}]},{"type":"text","value":" as line ending. Unix, in our case Alpine, uses just LF which makes the copying of our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hello.sh"}]},{"type":"text","value":" invalid bash script in the build phase. To overcome this error change the line endings to LF before running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! By default "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" will look for a file named Dockerfile. Now we can run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" with instructions where to build ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":") and give it a name ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t <name>"}]},{"type":"text","value":"):"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker build . -t hello-docker\n  Sending build context to Docker daemon  54.78kB\n  Step 1/4 : FROM alpine:3.13\n   ---> d6e46aa2470d\n  Step 2/4 : WORKDIR /usr/src/app\n   ---> Running in bd0b4e349cb4\n  Removing intermediate container bd0b4e349cb4\n   ---> b382ca27c182\n  Step 3/4 : COPY hello.sh .\n   ---> 7fbc1b6e45ab\n  Step 4/4 : CMD ./hello.sh\n   ---> Running in 24f28f026b3f\n  Removing intermediate container 24f28f026b3f\n   ---> 444f21cf7bd5\n  Successfully built 444f21cf7bd5\n  Successfully tagged hello-docker:latest\n\n$ docker images\n  REPOSITORY            TAG          IMAGE ID       CREATED         SIZE\n  hello-docker          latest       444f21cf7bd5   2 minutes ago   5.57MB"}]}]}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker cp"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now executing the application is as simple as running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run hello-docker"}]},{"type":"text","value":". Try it! During the build we see that there are multiple steps with hashes and intermediate containers. The steps here represent the layers so that each step is a new layer to the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"layers"}]},{"type":"text","value":" have multiple functions. We often try to limit the number of layers to save on storage space but layers can work as a cache during build time. If we just edit the last lines of Dockerfile the build command can start from the previous layer and skip straight to the section that has changed. COPY automatically detects changes in the files, so if we change the hello.sh it'll run from step 3/4, skipping 1 and 2. This can be used to create faster build pipelines. We'll talk more about optimization in part 3."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The intermediate containers are containers created from the image in which the command is executed. Then the changed state is stored into an image. We can do similiar task and a new layer manually. Create a new file called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"additional.txt"}]},{"type":"text","value":" and let's copy it inside the container and learn new trick while we're at it!"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it hello-docker sh\n/usr/src/app #"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we're inside of the container. We replaced the CMD we defined earlier with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sh"}]},{"type":"text","value":" and used -i and -t to start the container so that we can interact with it. In the second terminal we will copy the file here."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker ps\n  CONTAINER ID   IMAGE          COMMAND   CREATED         STATUS         PORTS     NAMES\n  9c06b95e3e85   hello-docker   \"sh\"      4 minutes ago   Up 4 minutes             zen_rosalind\n\n$ docker cp ./additional.txt zen_rosalind:/usr/src/app/"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I created the file with touch right before copying it in. Now it's there and we can confirm that with ls:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"/usr/src/app # ls\nadditional.txt  hello.sh"}]}]}]}]},{"type":"element","tagName":"exercise","properties":{"name":"docker diff and commit"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! Now we've made a change to the container. We can use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"diff"}]},{"type":"text","value":" to check what has changed"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker diff zen_rosalind\n  C /usr\n  C /usr/src\n  C /usr/src/app\n  A /usr/src/app/additional.txt\n  C /root\n  A /root/.ash_history"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The character in front of the file name indicates the type of the change in the container's filesystem: A = added, D = deleted, C = changed. The additional.txt was created and our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" created .ash_history. Next we will save the changes as a new layer!"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker commit zen_rosalind hello-docker-additional\n  sha256:2f63baa355ce5976bf89fe6000b92717f25dd91172aed716208e784315bfc4fd\n$ docker images\n  REPOSITORY                   TAG          IMAGE ID       CREATED          SIZE\n  hello-docker-additional      latest       2f63baa355ce   3 seconds ago    5.57MB\n  hello-docker                 latest       444f21cf7bd5   31 minutes ago   5.57MB"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, if we create another container from this image, we can see that the additional file is there."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run hello-docker-additional ls\nadditional.txt\nhello.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will actually never use docker commit again. This is because defining the changes to the Dockerfile is much more sustainable method of managing changes. No magic actions or scripts, just a Dockerfile that can be version controlled."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"image v2"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's do just that and create hello-docker with v2 tag that includes additional.txt."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Start from the alpine image that is smaller but no fancy tools"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" alpine"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"3.13\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Use /usr/src/app as our workdir. The following instructions will be executed in this location."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /usr/src/app\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" hello.sh .\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Alternatively, if we skipped chmod earlier, we can add execution permissions during the build."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" chmod +x hello.sh\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Execute a command with `/bin/sh -c` prefix."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" touch additional.txt\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# When running docker run the command will be ./hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" ./hello.sh\n"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Build it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build . -t hello-docker:v2"}]},{"type":"text","value":" and we are done! Let's compare the output of ls:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker build . -t hello-docker:v2\n\n$ docker run hello-docker-additional ls\n  additional.txt\n  hello.sh\n\n$ docker run hello-docker:v2 ls\n  additional.txt\n  hello.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we know that all instructions in a Dockerfile "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"except"}]},{"type":"text","value":" CMD (and one other that we will learn about soon) are executed during build time. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" is executed when we call docker run, unless we overwrite it."}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Publishing images"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Go to "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://hub.docker.com/"}]},{"type":"text","value":" to create an account. You can configure docker hub to build your images for you, but using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"push"}]},{"type":"text","value":" works as well."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's publish the hello-docker image. Log in and navigate to your "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/repositories","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"dashboard"}]},{"type":"text","value":" and press Create Repository. The namespace can be either your personal account or an organization account. For now, let's stick to personal accounts and write something descriptive such as hello-docker to repository name. We will need to remember it in part 2."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Set visibility to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"public"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And the last thing we need is to authenticate our push by logging in:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"docker login"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next, you will need to rename the image to include your username, and then you can push it:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker tag hello-docker <username>/<repository>\n  ...\n\n$ docker push <username>/<repository>\n  ..."}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"ghcr"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/matti/tailer/pkgs/container/tailer","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/matti/tailer/pkgs/container/tailer"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"docker tag hello-docker ghcr.io/matti/tailer/hello-docker\ndocker push ghcr.io/matti/tailer/hello-docker"}]}]}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.8: Image for script"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"curler/"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can improve our previous solutions now that we know how to create and build a Dockerfile."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Create a new file on your local machine with and append the script we used previously into that file"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"curler/curler.sh"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","shebang","important"]},"children":[{"type":"text","value":"#!/bin/sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"echo"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Input website:\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"read"}]},{"type":"text","value":" website\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"echo"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Searching..\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sleep"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"curl"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"http://"},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"$website"}]},{"type":"text","value":"\""}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Create a Dockerfile for a new image that starts from ubuntu:22.04 and add instructions to install curl into that image. Then add instructions to copy the script file into that image and finally set it to run on container start using CMD."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After you have filled the Dockerfile, build the image with the tag \"curler\"."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you are getting permission denied, use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"chmod"}]},{"type":"text","value":" to give permission to run the script."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following should now work:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ docker run -it curler\n\n  Input website:\n  helsinki.fi\n  Searching"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":".."}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!"}]},{"type":"text","value":"DOCTYPE HTML PUBLIC "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"-//IETF//DTD HTML 2.0//EN\""}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"html"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"head"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"title"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"301"}]},{"type":"text","value":" Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/title"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/head"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"body"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","file-descriptor","important"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":">"}]},{"type":"text","value":"Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/h"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","file-descriptor","important"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"p"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"The document has moved "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"a "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"href"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"https://www.helsinki.fi/\""}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"here"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/a"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"."},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/p"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/body"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/html"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"curler/Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" ubuntu"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"22.04\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" apt"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"get update\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" apt"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"get install "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"y curl\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /app\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" curler.sh .\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" chmod +x curler.sh\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" /app/curler.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"curler/curler.sh"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","shebang","important"]},"children":[{"type":"text","value":"#!/bin/sh"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"echo"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Input website:\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"read"}]},{"type":"text","value":" website\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"echo"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Searching..\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sleep"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"curl"}]},{"type":"text","value":" http://"},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"$website"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]}]}]},"html":"<div><p>Images are the basic building blocks for containers and other images. When you \"containerize\" an application you work towards creating the image.</p><p>By learning what images are and how to create them you are ready to start utilizing containers in your own projects.</p><text-box variant='learningObjectives' name='Where do the images come from?'><p>When running a command such as <code class=\"language-text\">docker run hello-world</code>, Docker will automatically search <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub</a> for the image if it is not found locally.</p><p>This means that we can pull and run any public image from Docker's servers. For example‚ if we wanted to start an instance of the PostgreSQL database, we could just run <code class=\"language-text\">docker run postgres</code>, which would pull and run <a href=\"https://hub.docker.com/_/postgres/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/_/postgres/</a>.</p><p>We can search for images in the Docker Hub with <code class=\"language-text\">docker search</code>. Try running <code class=\"language-text\">docker search hello-world</code>.</p><p>The search finds plenty of results, and prints each image's name, short description, amount of stars, and \"official\" and \"automated\" statuses.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker search hello-world\n\n  NAME                          DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\n  hello-world                   Hello World! (an example of minimal Dockeriz…   1898      [OK]\n  kitematic/hello-world-nginx   A light-weight nginx container that demonstr…   153\n  tutum/hello-world             Image to test docker deployments. Has Apache…   90                   [OK]\n  ...</code></pre></div><p>Let's examine the list.</p><p>The first result, <code class=\"language-text\">hello-world</code>, is an official image. <a href=\"https://docs.docker.com/docker-hub/official_images/\" target=\"_blank\" rel=\"noopener noreferrer\">Official images</a> are curated and reviewed by Docker, Inc. and are usually actively maintained by the authors. They are built from repositories at <a href=\"https://github.com/docker-library/official-images/tree/master/library\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/docker-library/official-images/tree/master/library</a>.</p><p>When browsing the CLI's search results, you can recognize an official image from the \"[OK]\" in the \"OFFICIAL\" column and also from the fact that the image's name has no prefix (aka organization/user). When browsing Docker Hub, the page will show \"Docker Official Images\" as the repository, instead of a user or organization. For example, see the <a href=\"https://hub.docker.com/_/hello-world/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> of the <code class=\"language-text\">hello-world</code> image.</p><p>The seventh result, <code class=\"language-text\">tutum/hello-world</code>, is marked as \"automated\". This means that the image is <a href=\"https://docs.docker.com/docker-hub/builds/\" target=\"_blank\" rel=\"noopener noreferrer\">automatically built</a> from the source repository. Its <a href=\"https://hub.docker.com/r/tutum/hello-world/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> shows its previous \"Builds\" and a link to the image's \"Source Repository\" (in this case, to GitHub) from which Docker Hub builds the image.</p><p>The ninth result, <code class=\"language-text\">kitematic/hello-world-nginx</code>, is neither an official nor an automated image.\nWe can't know what the image is built from, since its <a href=\"https://hub.docker.com/r/kitematic/hello-world-nginx/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> has no links to any repositories. The only thing its Docker Hub page reveals is that the image is 8 years old. Even if the image's \"Overview\" section had links to a repository, we would have no guarantees that the published image was built from that source.</p><p>There are also other Docker registries competing with Docker Hub, such as <a href=\"https://quay.io/\" target=\"_blank\" rel=\"noopener noreferrer\">quay</a>. However, <code class=\"language-text\">docker search</code> will only search from Docker Hub, so we will need to use the registry's web pages to search for images. Let's have look at one the images <a href=\"https://quay.io/repository/jetstack/cert-manager-controller\" target=\"_blank\" rel=\"noopener noreferrer\">https://quay.io/repository/jetstack/cert-manager-controller</a> - The page says \"Pull this container with the following Docker command:\"</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">docker pull quay.io/jetstack/cert-manager-controller</code></pre></div><p>Running that command however, fails:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull quay.io/jetstack/cert-manager-controller\nUsing default tag: latest\nError response from daemon: manifest for quay.io/jetstack/cert-manager-controller:latest not found: manifest unknown: manifest unknown</code></pre></div><p>This is because <code class=\"language-text\">:latest</code> tag is not found and the quay.io interface doesn't know about it.</p><p>To know what to pull, we need to check the tag listing on the left <a href=\"https://quay.io/repository/jetstack/cert-manager-controller?tab=tags\" target=\"_blank\" rel=\"noopener noreferrer\">https://quay.io/repository/jetstack/cert-manager-controller?tab=tags</a>.</p><p>Now when we add some tag, such as <code class=\"language-text\">v1.10.0</code> to the pull command it will work:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull quay.io/jetstack/cert-manager-controller:v1.10.0\nv1.10.0: Pulling from jetstack/cert-manager-controller\nf7cbc5ea5f86: Pull complete\n72fd16212d50: Pull complete\n986dd91bfabe: Pull complete\n88ba5ff7e12b: Pull complete\nDigest: sha256:bdacfee1ec9bc2b93d46eeb9cac3abc842813b60ba522848c551cb846384c367\nStatus: Downloaded newer image for quay.io/jetstack/cert-manager-controller:v1.10.0\nquay.io/jetstack/cert-manager-controller:v1.10.0</code></pre></div><p>So, if you don't specify the host part, docker pull will default to Docker Hub.</p><p>You don't have to use public Docker registries at all. For example the official Docker registry is open source <a href=\"https://docs.docker.com/registry/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/registry/</a>, but there are plenty of other compatible solutions to choose from such as <a href=\"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry</a>, <a href=\"https://aws.amazon.com/ecr/\" target=\"_blank\" rel=\"noopener noreferrer\">https://aws.amazon.com/ecr/</a>, <a href=\"https://cloud.google.com/container-registry\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.google.com/container-registry</a>, <a href=\"https://goharbor.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://goharbor.io/</a> and <a href=\"https://www.projectquay.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.projectquay.io/</a></p></text-box><text-box variant='learningObjectives' name='Look into the ubuntu image'><p>Let's look into the ubuntu image on <a href=\"https://hub.docker.com/r/library/ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub</a></p><p>Was: <a href=\"https://github.com/tianon/docker-brew-ubuntu-core/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tianon/docker-brew-ubuntu-core/</a>, current state of things: <a href=\"https://github.com/docker-library/repo-info/issues/66\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/docker-library/repo-info/issues/66</a></p><p>If we can not trust this process, we need to create our own Ubuntu image, for example by forking <a href=\"https://github.com/tianon/docker-brew-ubuntu-core/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tianon/docker-brew-ubuntu-core/</a></p></text-box><exercise name='A detailed look into an image'><p>Let's go back to a more relevant image than 'hello-world', the ubuntu image, one of the most common Docker images to use as a base for your own image.</p><p>Let's pull Ubuntu and look at the first lines:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull ubuntu\n  Using default tag: latest\n  latest: Pulling from library/ubuntu</code></pre></div><p>Since we didn't specify a tag, Docker defaulted to <code class=\"language-text\">latest</code>, which is usually the latest image built and pushed to the registry. <strong>However</strong>, in this case, the <a href=\"https://hub.docker.com/_/ubuntu\" target=\"_blank\" rel=\"noopener noreferrer\">repository's README</a> says that the <code class=\"language-text\">ubuntu:latest</code> tag points to the \"latest LTS\" instead since that's the version recommended for general use.</p><p>Images can be tagged to save different versions of the same image. You define an image's tag by adding <code class=\"language-text\">:&lt;tag&gt;</code> after the image's name.</p><p>Ubuntu's <a href=\"https://hub.docker.com/r/library/ubuntu/tags/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> reveals that there's a tag named 18.04 which promises us that the image is based on Ubuntu 18.04. Let's pull that as well:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull ubuntu:18.04\n  18.04: Pulling from library/ubuntu\n  c2ca09a1934b: Downloading [============================================&gt;      ]  34.25MB/38.64MB\n  d6c3619d2153: Download complete\n  0efe07335a04: Download complete\n  6b1bb01b3a3b: Download complete\n  43a98c187399: Download complete</code></pre></div><p>Images are composed of different layers that are downloaded in parallel to speed up the download. Images being made of layers also have other aspects and we will talk about them in part 3.</p><p>We can also tag images locally for convenience, for example, <code class=\"language-text\">docker tag ubuntu:18.04 ubuntu:bionic</code> creates the tag <code class=\"language-text\">ubuntu:bionic</code> which refers to <code class=\"language-text\">ubuntu:18.04</code>.</p><p>Tagging is also a way to \"rename\" images. Run <code class=\"language-text\">docker tag ubuntu:18.04 fav_distro:bionic</code> and check <code class=\"language-text\">docker images</code> to see what effects the command had.</p><p>To summarize, an image name may consist of 3 parts plus a tag. Usually like the following: <code class=\"language-text\">registry/organisation/image:tag</code>. But may be as short as <code class=\"language-text\">ubuntu</code>, then the registry will default to docker hub, organisation to <em>library</em> and tag to <em>latest</em>. The organisation may also be a user, but calling it an organisation may be more clear.</p></exercise><exercise name=\"Exercise 1.5: Sizes of images\"><p>In a previous exercise we used <code class=\"language-text\">devopsdockeruh/simple-web-service:ubuntu</code>.</p><p>Here is the same application but instead of ubuntu is using <a href=\"https://www.alpinelinux.org\" target=\"_blank\" rel=\"noopener noreferrer\">Alpine Linux</a>: <code class=\"language-text\">devopsdockeruh/simple-web-service:alpine</code>.</p><p>Pull both images and compare the image sizes with <code class=\"language-text\">docker image ls</code>.\nGo inside the alpine container and make sure the secret message functionality is the same. Alpine version doesn't have <code class=\"language-text\">bash</code> but it has <code class=\"language-text\">sh</code>.</p></exercise><exercise name='docker/hello'><p>Finally, we get to build our own images and get to talk about Dockerfile and why it's so great.</p><p>Dockerfile is simply a file that contains the build instructions for an image. You define what should be included in the image with different instructions. We'll learn about the best practices here by creating one.</p><p>Let's take a most simple application and containerize it first. Here is a script called \"hello.sh\"</p><p><strong>hello/hello.sh</strong></p><div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/bin/sh\n\necho &quot;Hello, docker!&quot;</code></pre></div><p>First, we will test that it even works. Create the file, add execution permissions and run it:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ chmod +x hello.sh\n\n$ ./hello.sh\n  Hello, docker!</code></pre></div><ul>\n<li>If you're using windows you can skip these two and add chmod +x hello.sh to the Dockerfile.</li>\n</ul><p>And now to create an image from it. We'll have to create the Dockerfile that declares all of the required dependencies. At least it depends on something that can run shell scripts. So I will choose Alpine, it is a small Linux distribution and often used to create small images.</p><p>Even though we're using alpine here, you can use Ubuntu during exercises. Ubuntu images by default contain more tools to debug what is wrong when something doesn't work. In part 3 we will talk more about why small images are important.</p><p>We will choose exactly which version of a given image we want to use. This makes it so that we don't accidentally update through a breaking change, and we know which images need updating when there are known security vulnerabilities in old images.</p><p>Now create a file and name it \"Dockerfile\" and lets put the following instructions inside it:</p><p><strong>Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Start from the alpine image that is smaller but no fancy tools</span>\n<span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>3.13\n\n<span class=\"token comment\"># Use /usr/src/app as our workdir. The following instructions will be executed in this location.</span>\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n\n<span class=\"token comment\"># Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh</span>\n<span class=\"token keyword\">COPY</span> hello.sh .\n\n<span class=\"token comment\"># Alternatively, if we skipped chmod earlier, we can add execution permissions during the build.</span>\n<span class=\"token keyword\">RUN</span> chmod +x hello.sh\n\n<span class=\"token comment\"># When running docker run the command will be ./hello.sh</span>\n<span class=\"token keyword\">CMD</span> ./hello.sh</code></pre></div><text-box name=\"Permission denied\" variant=\"hint\"><p>If you're now getting \"/bin/sh: ./hello.sh: Permission denied\" it's because the <code class=\"language-text\">chmod +x hello.sh</code> was skipped earlier. You can simply uncomment the RUN instruction between COPY and CMD instructions</p></text-box><text-box name=\"not found\" variant=\"hint\"><p>If you're now getting \"/bin/sh: ./hello.sh: not found\" and you're using Windows it might be because by default Windows uses <a href=\"https://www.cs.toronto.edu/~krueger/csc209h/tut/line-endings.html\" target=\"_blank\" rel=\"noopener noreferrer\">CRLF</a> as line ending. Unix, in our case Alpine, uses just LF which makes the copying of our <code class=\"language-text\">hello.sh</code> invalid bash script in the build phase. To overcome this error change the line endings to LF before running <code class=\"language-text\">docker build</code></p></text-box><p>Great! By default <code class=\"language-text\">docker build</code> will look for a file named Dockerfile. Now we can run <code class=\"language-text\">docker build</code> with instructions where to build (<code class=\"language-text\">.</code>) and give it a name (<code class=\"language-text\">-t &lt;name&gt;</code>):</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker build . -t hello-docker\n  Sending build context to Docker daemon  54.78kB\n  Step 1/4 : FROM alpine:3.13\n   ---&gt; d6e46aa2470d\n  Step 2/4 : WORKDIR /usr/src/app\n   ---&gt; Running in bd0b4e349cb4\n  Removing intermediate container bd0b4e349cb4\n   ---&gt; b382ca27c182\n  Step 3/4 : COPY hello.sh .\n   ---&gt; 7fbc1b6e45ab\n  Step 4/4 : CMD ./hello.sh\n   ---&gt; Running in 24f28f026b3f\n  Removing intermediate container 24f28f026b3f\n   ---&gt; 444f21cf7bd5\n  Successfully built 444f21cf7bd5\n  Successfully tagged hello-docker:latest\n\n$ docker images\n  REPOSITORY            TAG          IMAGE ID       CREATED         SIZE\n  hello-docker          latest       444f21cf7bd5   2 minutes ago   5.57MB</code></pre></div></exercise><exercise name='docker cp'><p>Now executing the application is as simple as running <code class=\"language-text\">docker run hello-docker</code>. Try it! During the build we see that there are multiple steps with hashes and intermediate containers. The steps here represent the layers so that each step is a new layer to the image.</p><p>The <strong>layers</strong> have multiple functions. We often try to limit the number of layers to save on storage space but layers can work as a cache during build time. If we just edit the last lines of Dockerfile the build command can start from the previous layer and skip straight to the section that has changed. COPY automatically detects changes in the files, so if we change the hello.sh it'll run from step 3/4, skipping 1 and 2. This can be used to create faster build pipelines. We'll talk more about optimization in part 3.</p><p>The intermediate containers are containers created from the image in which the command is executed. Then the changed state is stored into an image. We can do similiar task and a new layer manually. Create a new file called <code class=\"language-text\">additional.txt</code> and let's copy it inside the container and learn new trick while we're at it!</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it hello-docker sh\n/usr/src/app #</code></pre></div><p>Now we're inside of the container. We replaced the CMD we defined earlier with <code class=\"language-text\">sh</code> and used -i and -t to start the container so that we can interact with it. In the second terminal we will copy the file here.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker ps\n  CONTAINER ID   IMAGE          COMMAND   CREATED         STATUS         PORTS     NAMES\n  9c06b95e3e85   hello-docker   &quot;sh&quot;      4 minutes ago   Up 4 minutes             zen_rosalind\n\n$ docker cp ./additional.txt zen_rosalind:/usr/src/app/</code></pre></div><p>I created the file with touch right before copying it in. Now it's there and we can confirm that with ls:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">/usr/src/app # ls\nadditional.txt  hello.sh</code></pre></div></exercise><exercise name='docker diff and commit'><p>Great! Now we've made a change to the container. We can use <code class=\"language-text\">diff</code> to check what has changed</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker diff zen_rosalind\n  C /usr\n  C /usr/src\n  C /usr/src/app\n  A /usr/src/app/additional.txt\n  C /root\n  A /root/.ash_history</code></pre></div><p>The character in front of the file name indicates the type of the change in the container's filesystem: A = added, D = deleted, C = changed. The additional.txt was created and our <code class=\"language-text\">ls</code> created .ash_history. Next we will save the changes as a new layer!</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker commit zen_rosalind hello-docker-additional\n  sha256:2f63baa355ce5976bf89fe6000b92717f25dd91172aed716208e784315bfc4fd\n$ docker images\n  REPOSITORY                   TAG          IMAGE ID       CREATED          SIZE\n  hello-docker-additional      latest       2f63baa355ce   3 seconds ago    5.57MB\n  hello-docker                 latest       444f21cf7bd5   31 minutes ago   5.57MB</code></pre></div><p>Now, if we create another container from this image, we can see that the additional file is there.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run hello-docker-additional ls\nadditional.txt\nhello.sh</code></pre></div><p>We will actually never use docker commit again. This is because defining the changes to the Dockerfile is much more sustainable method of managing changes. No magic actions or scripts, just a Dockerfile that can be version controlled.</p></exercise><exercise name='image v2'><p>Let's do just that and create hello-docker with v2 tag that includes additional.txt.</p><p><strong>Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Start from the alpine image that is smaller but no fancy tools</span>\n<span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>3.13\n\n<span class=\"token comment\"># Use /usr/src/app as our workdir. The following instructions will be executed in this location.</span>\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n\n<span class=\"token comment\"># Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh</span>\n<span class=\"token keyword\">COPY</span> hello.sh .\n\n<span class=\"token comment\"># Alternatively, if we skipped chmod earlier, we can add execution permissions during the build.</span>\n<span class=\"token keyword\">RUN</span> chmod +x hello.sh\n\n<span class=\"token comment\"># Execute a command with `/bin/sh -c` prefix.</span>\n<span class=\"token keyword\">RUN</span> touch additional.txt\n\n<span class=\"token comment\"># When running docker run the command will be ./hello.sh</span>\n<span class=\"token keyword\">CMD</span> ./hello.sh\n</code></pre></div><p>Build it with <code class=\"language-text\">docker build . -t hello-docker:v2</code> and we are done! Let's compare the output of ls:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker build . -t hello-docker:v2\n\n$ docker run hello-docker-additional ls\n  additional.txt\n  hello.sh\n\n$ docker run hello-docker:v2 ls\n  additional.txt\n  hello.sh</code></pre></div><p>Now we know that all instructions in a Dockerfile <strong>except</strong> CMD (and one other that we will learn about soon) are executed during build time. <strong>CMD</strong> is executed when we call docker run, unless we overwrite it.</p></exercise><text-box variant='learningObjectives' name='Publishing images'><p>Go to <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/</a> to create an account. You can configure docker hub to build your images for you, but using <code class=\"language-text\">push</code> works as well.</p><p>Let's publish the hello-docker image. Log in and navigate to your <a href=\"https://hub.docker.com/repositories\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> and press Create Repository. The namespace can be either your personal account or an organization account. For now, let's stick to personal accounts and write something descriptive such as hello-docker to repository name. We will need to remember it in part 2.</p><p>Set visibility to <em>public</em>.</p><p>And the last thing we need is to authenticate our push by logging in:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">docker login</code></pre></div><p>Next, you will need to rename the image to include your username, and then you can push it:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker tag hello-docker &lt;username&gt;/&lt;repository&gt;\n  ...\n\n$ docker push &lt;username&gt;/&lt;repository&gt;\n  ...</code></pre></div></text-box><text-box variant='learningObjectives' name='ghcr'><p><a href=\"https://github.com/matti/tailer/pkgs/container/tailer\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/matti/tailer/pkgs/container/tailer</a></p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">docker tag hello-docker ghcr.io/matti/tailer/hello-docker\ndocker push ghcr.io/matti/tailer/hello-docker</code></pre></div></text-box><exercise name=\"Exercise 1.8: Image for script\"><p><strong>curler/</strong></p><p>We can improve our previous solutions now that we know how to create and build a Dockerfile.</p><p>Create a new file on your local machine with and append the script we used previously into that file</p><p><strong>curler/curler.sh</strong></p><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Input website:\"</span>\n<span class=\"token builtin class-name\">read</span> website\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Searching..\"</span>\n<span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n\n<span class=\"token function\">curl</span> <span class=\"token string\">\"http://<span class=\"token variable\">$website</span>\"</span></code></pre></div><p>Create a Dockerfile for a new image that starts from ubuntu:22.04 and add instructions to install curl into that image. Then add instructions to copy the script file into that image and finally set it to run on container start using CMD.</p><p>After you have filled the Dockerfile, build the image with the tag \"curler\".</p><ul>\n<li>If you are getting permission denied, use <code class=\"language-text\">chmod</code> to give permission to run the script.</li>\n</ul><p>The following should now work:</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it curler\n\n  Input website:\n  helsinki.fi\n  Searching<span class=\"token punctuation\">..</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE HTML PUBLIC <span class=\"token string\">\"-//IETF//DTD HTML 2.0//EN\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">301</span> Moved Permanently<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>Moved Permanently<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>The document has moved <span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.helsinki.fi/\"</span><span class=\"token operator\">></span>here<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span>.<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span></code></pre></div><p><strong>curler/Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> ubuntu<span class=\"token punctuation\">:</span>22.04\n\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y curl\n\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> curler.sh .\n\n<span class=\"token keyword\">RUN</span> chmod +x curler.sh\n\n<span class=\"token keyword\">CMD</span> /app/curler.sh</code></pre></div><p><strong>curler/curler.sh</strong></p><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Input website:\"</span>\n<span class=\"token builtin class-name\">read</span> website\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Searching..\"</span>\n<span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n<span class=\"token function\">curl</span> http://<span class=\"token variable\">$website</span><span class=\"token punctuation\">;</span></code></pre></div></exercise></div>","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"},"fileAbsolutePath":"/Users/mpa/dev/docker-hy/data/part-1/section-3.md"},"allPages":{"edges":[{"node":{"id":"948f83e9-b338-5b95-ae2d-a7c680eadb0c","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"67016067-426f-51cc-8ea0-3e16da657b13","frontmatter":{"path":"/part-3/3-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"bc9490fd-c9f8-5a6a-8370-2ef946d4e3fa","frontmatter":{"path":"/part-3/4-extras","title":"Extras"}}},{"node":{"id":"fe138126-ea55-51b2-a071-8a7532aa51af","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"8147ba2c-1cbf-5878-b301-ef847e624e70","frontmatter":{"path":"/part-3/2-development","title":"Development with Docker"}}},{"node":{"id":"ed0e0aae-16de-5de9-8877-77337c24124f","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"1b7ed2f7-c954-577b-ac8d-cae5f2dfc838","frontmatter":{"path":"/part-2/2-docker-networking","title":"More Docker networking"}}},{"node":{"id":"3a0a776d-ec13-50e5-ade2-6c0d549f58ba","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"ad6b1fb2-b897-54c5-8ce5-00acf0c99caf","frontmatter":{"path":"/part-2/3-wordpress","title":"Wordpress"}}},{"node":{"id":"cea7278b-6d74-539e-b105-29dc780024b6","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"83f82958-678d-500e-8ce0-a2d587fed9c1","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"087c95a9-00b7-523d-bc13-85d227b71193","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"d3b909df-cb77-59a6-8402-f961bd2a7aff","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"e8a51e48-cc89-5f08-8c00-2c3abe47d5a9","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"455aef79-d091-56bd-bace-e566c89238bb","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"2b806816-8c59-5a3a-9b89-da8548d44e0a","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"a3fe4972-edce-5bc7-9eb5-b355fac1ebf8","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"3447594d-f3e4-56a2-8d83-12bf7ff5f3a4","frontmatter":{"path":"/part-3/1-using-non-root-user","title":"Using a non-root user"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}